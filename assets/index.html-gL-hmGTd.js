import{_ as i,c as e,b as a,o as n}from"./app-DNjG2iId.js";const l={};function t(d,s){return n(),e("div",null,[...s[0]||(s[0]=[a(`<p><em>Created: 2025/09/22 22:31:58</em></p><h2 id="_1-awk-的基本语法" tabindex="-1"><a class="header-anchor" href="#_1-awk-的基本语法"><span>1. AWK 的基本语法</span></a></h2><p>AWK 的命令格式通常是：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">模式 {动作}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>模式（Pattern）</strong>：可选，指定哪些行要处理（如正则匹配或条件判断）。如果省略，所有行都处理。假设awk命令是一条数据库命令，则Pattern的填写就如同SELECT语句。</li></ul><div class="language-pattern line-numbers-mode" data-highlighter="shiki" data-ext="pattern" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-pattern"><span class="line"><span>面对一个这样的query.log日志</span></span>
<span class="line"><span>20-Sep-2025 17:34:52.507 client 127.0.0.2 61096: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 82 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span>20-Sep-2025 17:34:53.532 client 127.0.0.1 54284: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 78 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span>20-Sep-2025 17:34:55.490 client 127.0.0.1 57371: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 74 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可以简单的实现对整个日志文件进行提取</span></span>
<span class="line"><span>awk &#39;$4 == &quot;127.0.0.2&quot; {print}&#39; query.log</span></span>
<span class="line"><span># 对于模糊搜索项, 也可以用 /搜索值/ 来定位到对应的日志行</span></span>
<span class="line"><span>awk &#39;/127.0.0.2/ {print}&#39; query.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>动作（Action）</strong>：用 <code>{}</code> 包裹，当使用Pattern选中了要进行操作的行后，就可以通过Action来对齐进行操作了</li></ul><div class="language-action line-numbers-mode" data-highlighter="shiki" data-ext="action" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-action"><span class="line"><span># 打印输出</span></span>
<span class="line"><span>awk &#39;Pattern {print $0}&#39; query.log      # 相当于打印出query.log被Pattern选中的行</span></span>
<span class="line"><span>awk &#39;Pattern {print $1, $2}&#39; query.log  # 相当于打印出query.log被Pattern选中的行中的第一和第二个字段</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 条件语句</span></span>
<span class="line"><span>awk &#39;Pattern {if ($4 == &quot;127.0.0.2&quot;) print $0; else print &quot;No matching!&quot;}&#39; query.log.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 特别要理解Action是逐一对/Pattern/匹配到的每一行，单独进行Action的</span></span>
<span class="line"><span>20-Sep-2025 17:34:52.507 client 127.0.0.2 61096: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 82 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span>20-Sep-2025 17:34:53.532 server 127.0.0.2 54284: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 78 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span>20-Sep-2025 17:34:55.490 hero 127.0.0.2 57371: view default: dns1.monitormyselfisok IN A NOERROR - NS NE NT ND NC L 0 0 0 0.000000 NW NA NA N FD source client NA NTN 74 Response: dns1.monitormyselfisok. 5 IN A 127.0.0.1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>arish@LAPTOP-5SC95QR5:~$ awk &#39;/127.0.0.2/ {if ($3 == &quot;client&quot;) print &quot;yes, my lord&quot;; else print &quot;you are lier&quot;}&#39; query.log</span></span>
<span class="line"><span>yes, my lord</span></span>
<span class="line"><span>you are lier</span></span>
<span class="line"><span>you are lier</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>文件名</strong>：输入文件，可以是日志路径。输出默认到终端，也可以重定向到文件（<code>&gt; output.txt</code>）。</li></ul><p>AWK 把每行日志视为“记录”（record），用分隔符（默认空格或制表符）拆分成“字段”（field），用 <code>$1</code>、<code>$2</code>... 表示第一个、第二个字段；<code>$0</code> 是整行。</p><p>用 <code>-F</code> 指定自定义分隔符（如 <code>-F &quot;:&quot;</code> 对于冒号分隔的日志）。</p><p><strong>例子</strong>：假设日志文件 <code>access.log</code> 内容是（简化版 Apache 日志）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>192.168.1.1 - - [22/Sep/2025:10:00:00] &quot;GET /index.html&quot; 200 1234</span></span>
<span class="line"><span>192.168.1.2 - - [22/Sep/2025:10:01:00] &quot;POST /login&quot; 404 567</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{print $1, $5}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> access.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>192.168.1.1 &quot;GET</span></span>
<span class="line"><span>192.168.1.2 &quot;POST</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里打印第一个字段（IP）和第五个字段（请求方法）。</p><h2 id="_2-内置变量-让-awk-更智能" tabindex="-1"><a class="header-anchor" href="#_2-内置变量-让-awk-更智能"><span>2. 内置变量：让 AWK 更智能</span></a></h2><p>AWK 有许多内置变量，简化日志处理：</p><ul><li><code>$0</code>：整行。</li><li><code>$n</code>：第 n 个字段。</li><li><code>NF</code>：当前行字段数（Number of Fields）。</li><li><code>NR</code>：当前行号（Number of Records）。</li><li><code>FS</code>：字段分隔符（Field Separator，默认空格）。</li><li><code>BEGIN {}</code>：在处理文件前执行（初始化变量）。</li><li><code>END {}</code>：处理完所有行后执行（输出总结）。</li></ul><p><strong>例子</strong>：统计日志行数（总记录数）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">END {print &quot;总行数: &quot; NR}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/log/syslog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在文件末尾打印 <code>NR</code>（行号，即总行）。</p><h2 id="_3-常见操作符和控制语句" tabindex="-1"><a class="header-anchor" href="#_3-常见操作符和控制语句"><span>3. 常见操作符和控制语句</span></a></h2><ul><li><strong>比较操作符</strong>：<code>==</code>（等于）、<code>!=</code>（不等于）、<code>&gt;</code>、<code>&lt;</code> 等。</li><li><strong>逻辑操作符</strong>：<code>&amp;&amp;</code>（与）、<code>||</code>（或）。</li><li><strong>正则匹配</strong>：<code>~</code> 或 <code>!~</code>（如 <code>$1 ~ /error/</code> 匹配包含 &quot;error&quot; 的字段）。</li><li><strong>控制语句</strong>：<code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>（像小程序）。</li></ul><p><strong>例子</strong>：过滤包含 &quot;error&quot; 的行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/error/ {print $0}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/log/syslog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>/error/</code> 是模式，只处理匹配行。</p><h2 id="_4-日志分析的实用例子" tabindex="-1"><a class="header-anchor" href="#_4-日志分析的实用例子"><span>4. 日志分析的实用例子</span></a></h2><p>AWK 在日志处理上的“出彩”点：可以结合 regex 精确匹配模式（如时间戳 <code>[0-9]{4}-[0-9]{2}-[0-9]{2}</code> 或 IP <code>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}</code>），提取关键信息。</p><h3 id="示例-1-提取特定字段-比如-ip-和状态码" tabindex="-1"><a class="header-anchor" href="#示例-1-提取特定字段-比如-ip-和状态码"><span>示例 1: 提取特定字段（比如 IP 和状态码）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{print $1, $9}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> access.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>192.168.1.1 200</span></span>
<span class="line"><span>192.168.1.2 404</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>提取 IP（<code>$1</code>）和状态码（<code>$9</code>）。比 vi 搜索快多了。</p><h3 id="示例-2-统计错误次数-计数失败登录" tabindex="-1"><a class="header-anchor" href="#示例-2-统计错误次数-计数失败登录"><span>示例 2: 统计错误次数（计数失败登录）</span></a></h3><p>针对 <code>/var/log/auth.log</code>（SSH 日志）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">($6 == &quot;Failed&quot; &amp;&amp; $7 == &quot;password&quot;) {count++} END {print &quot;失败登录次数: &quot; count}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/log/auth.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>模式</strong>：第六字段是 &quot;Failed&quot; 且第七是 &quot;password&quot;。</li><li><strong>动作</strong>：递增计数器 <code>count</code>。</li><li><strong>END</strong>：输出总数。</li></ul><h3 id="示例-3-按日期过滤-比如只看今天日志" tabindex="-1"><a class="header-anchor" href="#示例-3-按日期过滤-比如只看今天日志"><span>示例 3: 按日期过滤（比如只看今天日志）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1 == &quot;Sep&quot; &amp;&amp; $2 == &quot;22&quot; {print $0}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/log/syslog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>过滤月份（<code>$1</code>）和日期（<code>$2</code>）匹配的行。</p><h3 id="示例-4-使用-regex-匹配-ip-并计数" tabindex="-1"><a class="header-anchor" href="#示例-4-使用-regex-匹配-ip-并计数"><span>示例 4: 使用 regex 匹配 IP 并计数</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$NF ~ /[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/ {ip_count[$NF]++} END {for (ip in ip_count) print ip, ip_count[ip]}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/log/auth.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>匹配最后字段（<code>$NF</code>）的 IP 模式。</li><li>用数组 <code>ip_count</code> 统计每个 IP 出现次数。</li><li><strong>END</strong>：遍历数组输出（如 &quot;192.168.1.1 5&quot;）。</li></ul><h3 id="示例-5-求和-比如总响应大小" tabindex="-1"><a class="header-anchor" href="#示例-5-求和-比如总响应大小"><span>示例 5: 求和（比如总响应大小）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{sum += $10} END {print &quot;总响应大小: &quot; sum &quot; bytes&quot;}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> access.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>累加第十字段（响应大小）。</p><h2 id="_5-高级技巧-结合其他工具" tabindex="-1"><a class="header-anchor" href="#_5-高级技巧-结合其他工具"><span>5. 高级技巧：结合其他工具</span></a></h2><ul><li><strong>实时监控</strong>：<code>tail -f /var/log/syslog | awk &#39;/error/ {print $0}&#39;</code>（只显示错误行）。</li><li><strong>脚本化</strong>：把 AWK 代码写到文件 <code>myscript.awk</code>，运行 <code>awk -f myscript.awk log.file</code>。</li><li><strong>与 grep/sed 结合</strong>：AWK 更强在计算，grep 更强在简单搜索。</li></ul>`,51)])])}const h=i(l,[["render",t]]),p=JSON.parse('{"path":"/notes/Linux/85muhzy2/","title":"awk","lang":"zh-CN","frontmatter":{"title":"awk","createTime":"2025/09/22 22:31:58","permalink":"/notes/Linux/85muhzy2/"},"readingTime":{"minutes":4.45,"words":1336},"git":{"createdTime":1759802183000,"updatedTime":1759802183000,"contributors":[{"name":"BlackSiao","username":"BlackSiao","email":"1546600539@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/BlackSiao?v=4","url":"https://github.com/BlackSiao"}]},"filePathRelative":"notes/Linux/awk.md","headers":[]}');export{h as comp,p as data};
